name: GAS Deployment

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write
  actions: write
  issues: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install clasp
        run: npm i -g @google/clasp

      - name: Configure clasp auth
        env:
          CLASP_TOKEN_JSON: ${{ secrets.CLASP_TOKEN_JSON }}
        run: |
          echo "$CLASP_TOKEN_JSON" > ~/.clasprc.json
          echo "wrote ~/.clasprc.json"

      - name: Configure .clasp.json
        env:
          GAS_SCRIPT_ID: ${{ secrets.GAS_SCRIPT_ID }}
        run: |
          cat > .clasp.json <<JSON
          {
            "scriptId": "$GAS_SCRIPT_ID",
            "rootDir": "src"
          }
          JSON
          mkdir -p src

      - name: Push source to Apps Script
        run: |
          clasp push -f
          echo "clasp push done"

      - name: Version & Deploy
        run: |
          TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          clasp version "ci: $TS" || true
          clasp deploy --description "ci: $TS" || true
          echo "deploy attempted"

      - name: Locate EXEC_URL (primary)
        id: exec1
        continue-on-error: true
        run: |
          url="$(clasp open --webapp 2>/dev/null | grep -Eo 'https://script\.google(?:usercontent)?\.com/[^\ ]+|https://script\.google\.com/[^\ ]+' | head -n1 || true)"
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Primary -> $url"

      - name: Locate EXEC_URL (fallback)
        id: exec2
        if: steps.exec1.outputs.url == ''
        run: |
          url="$(clasp deployments 2>/dev/null | grep -Eo 'https://script\.google(?:usercontent)?\.com/[^\ ]+|https://script\.google\.com/[^\ ]+' | head -n1 || true)"
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "Fallback -> $url"

      - name: Finalize EXEC_URL
        id: execurl
        run: |
          url="${{ steps.exec1.outputs.url }}"
          if [ -z "$url" ]; then url="${{ steps.exec2.outputs.url }}"; fi
          echo "EXEC_URL=$url" | tee -a $GITHUB_STEP_SUMMARY
          if [ -z "$url" ]; then echo "No EXEC_URL found"; exit 1; fi
          echo "url=$url" >> $GITHUB_OUTPUT

      - name: Selftest
        run: |
          exec_url="${{ steps.execurl.outputs.url }}"
          sep='?'; echo "$exec_url" | grep -q '?' && sep='&' || true
          test_url="${exec_url}${sep}mode=selftest"
          echo "Selftest URL: $test_url" | tee -a $GITHUB_STEP_SUMMARY
          code=$(curl -sS -o /tmp/selftest.json -w "%{http_code}" "$test_url")
          echo "HTTP $code" | tee -a $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          sed -n '1,200p' /tmp/selftest.json >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          [ "$code" = "200" ] || (echo "Selftest failed (HTTP $code)"; exit 1)

      - name: Print summary to log
        run: |
          echo "EXEC_URL: ${{ steps.execurl.outputs.url }}"
          echo "Selftest stage completed"
